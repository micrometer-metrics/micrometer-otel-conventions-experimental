description 'Module containing Observation Semantic Conventions'

dependencies {
	// JUnit 5
	testImplementation 'org.junit.jupiter:junit-jupiter'
	testImplementation 'org.assertj:assertj-core'
}

sourceSets {
	main {
		java {
			java.srcDirs += new File(project.buildDir, "semconv/src/main/java/").toString()
		}
	}
}

tasks.named("formatMain") {
	def generatedSources = fileTree("build/semconv")
	exclude { candidate -> generatedSources.contains(candidate.file) }
	source(fileTree("src/main/"))
}

tasks.named("checkFormatMain") {
	def generatedSources = fileTree("build/semconv")
	exclude { candidate -> generatedSources.contains(candidate.file) }
	source(fileTree("src/main/"))
}

checkstyleMain.source = "src/"

tasks.register('copySemanticConventions', Copy) {
	from(new File(project.projectDir, 'semantic-convention'))
	into(new File(project.buildDir, "semconv-copy"))
}

tasks.register('generateSemanticConventions', Exec) {
	dependsOn('copySemanticConventions')
	workingDir new File(project.buildDir, "semconv-copy")
	commandLine './generate.sh'
	onlyIf {
		// TODO: Actually run only when sources in the semantic-convention folder have changed
		!new File(project.buildDir, 'semconv').exists()
	}
}

tasks.getByName("compileJava").dependsOn("generateSemanticConventions")
